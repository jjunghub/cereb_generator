# Copyright 2018 Cerebro Scholar
# generated by IS Lee
from cleansingAuthors import *
from printUtils import *
from authors import Author
import re, ast

def matching_authors(paperclean, cerebauthor_dict):
	print(blue("matching authors start"))
	paperclean['authors'] = paperclean['authors'].apply(lambda x : norm_authors(x, cerebauthor_dict))
	paperclean.drop(columns=['authors'], inplace=True)
	print(blue("Done matching authors !"))
	return paperclean

def get_cerebid_(au, authkeys):
	if au.email and authkeys['email'].get(au.email):
		return authkeys['email'][au.email]['cereb_auid']
	if au.wos_auid and authkeys['wos_auid'].get(au.wos_auid):
		return authkeys['wos_auid'][au.wos_auid]['cereb_auid']
	if au.scp_auid and authkeys['scp_auid'].get(au.scp_auid):
		return authkeys['scp_auid'][au.scp_auid]['cereb_auid']
	if au.name_chk_key and authkeys['name_chk_key'].get(au.name_chk_key):
		return authkeys['name_chk_key'][au.name_chk_key]['cereb_auid']
	print(yellow("{} author isn't matched to cereb_auid...".format(au.fullname)))
	return None

def norm_authors(x, cerebauthor_dict):
	if str(x) == 'nan' or str(x)=='None': return
	axvauthor, scpauthor, wosauthor, ieeeauthor = get_authors_list(x)
	ids = []
	for a, s, w, i in zip(axvauthor, scpauthor, wosauthor, ieeeauthor):
		full, _, src_ = get_fullnames(a,s,w,i)
		match = re.compile(r'( and )').search(full)
		if match:
			full_ = re.compile(r'( and )').sub("&", full)
			fullsplit = full_.split('&')
			if len(fullsplit) == 2 and (len(fullsplit[0].strip()) <= 3 or len(fullsplit[0].split(' ')) == 1):
				# author 한명으로
				full = full_.replace('&', ' ').strip()
			else:
				for idf, f in enumerate(fullsplit):
					if f.strip() == '': continue

					f = cleansing_fullname(f.strip())[1]
					if f.strip() == '' or f.strip() == '.': continue
						
					au = Author(None, None, f, src_)
					au.update_au(a,s,w,i)
					if au.fullname.strip() != '':
						cerebau = get_cerebid_(au, cerebauthor_dict)
						if cerebau != None:
							ids.append(cerebau)
				continue
		if full.strip() != '' and full.strip() != '.':
			au = Author(None, None, full, src_)
			au.update_au(a,s,w,i)
			if au.fullname.strip() != '':
				cerebau = get_cerebid_(au, cerebauthor_dict)
					if cerebau != None:
						ids.append(cerebau)
	return ids