# Copyright 2018 Cerebro Scholar
# generated by JE KIM
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from importDB import *
from cleansingPapers import *
from cleansingLinks import *
# from deepCleanseKeywords import *
from deepCleanseKeywords_v2 import *
from akaExtractor import *

# from generateTagset import *
from generateTagset_v2 import *
from matchTags import matchingTags

from cleansingAuthors import generate_cerebauthor_dict
from matchingAuthors import matching_authors

from cleansingPublication import cleansing_publications

class CerebDB_Generator :
	def __init__(self, crawlDBpath = 'backupdb.db') :
		if crawlDBpath == 'AWS' :
			self.papers, self.links = importDB_AWS()
		else : 
			self.papers, self.links = importDB_stored(crawlDBpath)
		# import pickle as pk
		# self.papers = pk.load(open("1016_papers.pkl", "rb"))
		
		self.papers_clean = cleansing_papers(self.papers, ['scp'])
		self.links_clean = cleansing_links(self.papers_clean, self.links)

		self.papers_clean, self.keylist = additional_cleansing_for_keywords(self.papers_clean, 'keywords_author')
		# ### papers_clean,keylist = additional_cleansing_for_keywords(papers_clean, 'keywords_other')
		
		self.AKADict = aka_extractor(self.keylist)

		self.group, self.tagDict, self.rawToTag = genTagSet(self.keylist, self.AKADict)
		
		# # Takes a while
		self.cerebDB = matchingTags(self.rawToTag, self.papers_clean)

		self.cerebDB = cleansing_publications(self.cerebDB)
		
		self.AuthorDict, self.cerebauthorgroup = generate_cerebauthor_dict(self.cerebDB)

		self.cerebDB = matching_authors(self.cerebDB, self.AuthorDict)

		# import pickle as pk
		# pk.dump(self.cerebDB, open("cerebDB.pkl" ,"wb"))
		
	def getCerebDB(self) :
		return self.cerebDB

	def getCerebLink(self) :
		return self.links_clean

	def getTagDict(self) :
		return self.tagDict

	def getRawToTag(self) :
		return self.rawToTag


if __name__ == "__main__" :
	CerebDB_Generator('AWS')


